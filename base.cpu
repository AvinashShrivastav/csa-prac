<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="base.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="INSTR" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field12df863a">
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Fieldd3652e0">
	</Field>
	<Field name="OPCODE" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field19636757">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register6cac4af1" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register2acef08" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register3d321cef" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register3f699dc1" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register311ca31f" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register54adce9b" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register79d56585" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Registera2178eb" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register5e7126eb" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY_BIT" bit="0" register="model.module.Register3f699dc1" halt="false" id="model.module.ConditionBit6412e2a8" />
	<ConditionBit name="HALT_BIT" bit="0" register="model.module.Registera2178eb" halt="true" id="model.module.ConditionBit36394ae2" />
	<ConditionBit name="INDIRECT_BIT" bit="0" register="model.module.Register311ca31f" halt="false" id="model.module.ConditionBit37de8aee" />

	<!--............. rams ..........................-->
	<RAM name="M" length="4096" cellSize="16" id="model.module.RAM604fb480" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register6cac4af1" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet22b3b1ed" />
	<Set name="E&lt;-0" register="model.module.Register3f699dc1" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet6cb420fa" />
	<Set name="S&lt;-1" register="model.module.Registera2178eb" start="0" numBits="1" value="1" id="model.microinstruction.CpusimSet7b8d2fdb" />

	<!--............. test ..........................-->
	<Test name="IF(AC(15)=0)" register="model.module.Register6cac4af1" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test6f54d515" />
	<Test name="IF(AC(15)=1)" register="model.module.Register6cac4af1" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test7d35ccd3" />
	<Test name="IF(AC=0)" register="model.module.Register6cac4af1" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test2b6c7012" />
	<Test name="IF(E=0)" register="model.module.Register3f699dc1" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test5d221fe7" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;-AC+1" register="model.module.Register6cac4af1" delta="1" id="model.microinstruction.Increment1497852b" />
	<Increment name="PC&lt;-PC+1" register="model.module.Register79d56585" delta="1" id="model.microinstruction.Increment4717903e" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;-shiftLeft" type="logical" source="model.module.Register6cac4af1" destination="model.module.Register6cac4af1" direction="left" distance="1" id="model.microinstruction.Shift6a3514ba" />
	<Shift name="AC&lt;-shiftRight" type="logical" source="model.module.Register6cac4af1" destination="model.module.Register6cac4af1" direction="right" distance="1" id="model.microinstruction.Shift1158ffa2" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-!(AC)" type="NOT" source1="model.module.Register6cac4af1" source2="model.module.Register6cac4af1" destination="model.module.Register6cac4af1" id="model.microinstruction.Logical190930aa" />
	<Logical name="AC&lt;-ACandDR" type="AND" source1="model.module.Register6cac4af1" source2="model.module.Register3d321cef" destination="model.module.Register6cac4af1" id="model.microinstruction.Logical4f7a79c6" />
	<Logical name="E&lt;-!(E)" type="NOT" source1="model.module.Register3f699dc1" source2="model.module.Register3f699dc1" destination="model.module.Register3f699dc1" id="model.microinstruction.Logical5b3f079" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="model.module.Register6cac4af1" source2="model.module.Register3d321cef" destination="model.module.Register6cac4af1" carryBit="model.module.ConditionBit6412e2a8" id="model.microinstruction.Arithmetic5955177" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0)&lt;-E" source="model.module.Register3f699dc1" srcStartBit="0" dest="model.module.Register6cac4af1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR53cb4b54" />
	<TransferRtoR name="AC(0)&lt;-TR(0)" source="model.module.Register5e7126eb" srcStartBit="0" dest="model.module.Register6cac4af1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR7c7ab6b3" />
	<TransferRtoR name="AC(15)&lt;-E" source="model.module.Register3f699dc1" srcStartBit="0" dest="model.module.Register6cac4af1" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR64c3cdf6" />
	<TransferRtoR name="AC&lt;-DR" source="model.module.Register3d321cef" srcStartBit="0" dest="model.module.Register6cac4af1" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR27306345" />
	<TransferRtoR name="AR&lt;-IR(0-11)" source="model.module.Register54adce9b" srcStartBit="0" dest="model.module.Register2acef08" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR2ea80d1c" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register79d56585" srcStartBit="0" dest="model.module.Register2acef08" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR74ef954" />
	<TransferRtoR name="E&lt;-AC(0)" source="model.module.Register6cac4af1" srcStartBit="0" dest="model.module.Register3f699dc1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR7d183836" />
	<TransferRtoR name="E&lt;-AC(15)" source="model.module.Register6cac4af1" srcStartBit="15" dest="model.module.Register3f699dc1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR5916569b" />
	<TransferRtoR name="E&lt;-TR(0)" source="model.module.Register5e7126eb" srcStartBit="0" dest="model.module.Register3f699dc1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR37387048" />
	<TransferRtoR name="I&lt;-IR(15)" source="model.module.Register54adce9b" srcStartBit="15" dest="model.module.Register311ca31f" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR474cbba2" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register2acef08" srcStartBit="0" dest="model.module.Register79d56585" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR7b29e2f5" />
	<TransferRtoR name="TR(0)&lt;-AC(0)" source="model.module.Register6cac4af1" srcStartBit="0" dest="model.module.Register5e7126eb" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1060d185" />
	<TransferRtoR name="TR(0)&lt;-E" source="model.module.Register3f699dc1" srcStartBit="0" dest="model.module.Register5e7126eb" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR64ae59f1" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE" ir="model.module.Register54adce9b" id="model.microinstruction.Decode646d183f" />

	<!--............. set condition bit .............-->
	<!-- none -->

	<!--............. io ............................-->
	<IO name="Input" direction="input" type="integer" buffer="model.module.Register6cac4af1" connection="[Console]" id="model.microinstruction.IO159454cb" />
	<IO name="Output" direction="output" type="integer" buffer="model.module.Register6cac4af1" connection="[Console]" id="model.microinstruction.IO19b41aa6" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="model.module.RAM604fb480" data="model.module.Register3d321cef" address="model.module.Register2acef08" id="model.microinstruction.MemoryAccess3e2d9326" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="model.module.RAM604fb480" data="model.module.Register54adce9b" address="model.module.Register2acef08" id="model.microinstruction.MemoryAccess6f701b4b" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="model.module.RAM604fb480" data="model.module.Register6cac4af1" address="model.module.Register2acef08" id="model.microinstruction.MemoryAccess58f52862" />
	<MemoryAccess name="M[AR]&lt;-PC" direction="write" memory="model.module.RAM604fb480" data="model.module.Register79d56585" address="model.module.Register2acef08" id="model.microinstruction.MemoryAccess61ad78f0" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End33cb7340" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR74ef954" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess6f701b4b" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR2ea80d1c" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR474cbba2" />
		<Microinstruction microRef="model.microinstruction.Decode646d183f" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="BSA" opcode="5" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#85fa88 #c3fdf3" assemblyColors="#85fa88 #c3fdf3" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess61ad78f0" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7b29e2f5" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#e38187 #81fcb8" assemblyColors="#e38187 #81fcb8" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR7b29e2f5" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#fce9c5" assemblyColors="#fce9c5" >
		<Microinstruction microRef="model.microinstruction.IO19b41aa6" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#89a0d9" assemblyColors="#89a0d9" >
		<Microinstruction microRef="model.microinstruction.IO159454cb" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#89c2e7 #8bca85" assemblyColors="#89c2e7 #8bca85" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess58f52862" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#c09181 #c197d7" assemblyColors="#c09181 #c197d7" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess3e2d9326" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR27306345" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#c3d2d1 #c8c9a6" assemblyColors="#c3d2d1 #c8c9a6" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess3e2d9326" />
		<Microinstruction microRef="model.microinstruction.Arithmetic5955177" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OPCODE ADDR" assemblyFormat="OPCODE ADDR" instructionColors="#e9ac9a #cfdaf4" assemblyColors="#e9ac9a #cfdaf4" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess3e2d9326" />
		<Microinstruction microRef="model.microinstruction.Logical4f7a79c6" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="7002" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#f48acc" assemblyColors="#f48acc" >
		<Microinstruction microRef="model.microinstruction.Test5d221fe7" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="7004" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#94c180" assemblyColors="#94c180" >
		<Microinstruction microRef="model.microinstruction.Test2b6c7012" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="7008" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#d5f694" assemblyColors="#d5f694" >
		<Microinstruction microRef="model.microinstruction.Test7d35ccd3" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7010" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#a7d5bd" assemblyColors="#a7d5bd" >
		<Microinstruction microRef="model.microinstruction.Test6f54d515" />
		<Microinstruction microRef="model.microinstruction.Increment4717903e" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#9589d5" assemblyColors="#9589d5" >
		<Microinstruction microRef="model.microinstruction.CpusimSet7b8d2fdb" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="7020" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#e1bdda" assemblyColors="#e1bdda" >
		<Microinstruction microRef="model.microinstruction.Increment1497852b" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#d5edb9" assemblyColors="#d5edb9" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR1060d185" />
		<Microinstruction microRef="model.microinstruction.Shift1158ffa2" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR64c3cdf6" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR37387048" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#92cab7" assemblyColors="#92cab7" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR64ae59f1" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5916569b" />
		<Microinstruction microRef="model.microinstruction.Shift6a3514ba" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7c7ab6b3" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#95ccf2" assemblyColors="#95ccf2" >
		<Microinstruction microRef="model.microinstruction.Logical5b3f079" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#e1c5ce" assemblyColors="#e1c5ce" >
		<Microinstruction microRef="model.microinstruction.Logical190930aa" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="7400" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#a6adf1" assemblyColors="#a6adf1" >
		<Microinstruction microRef="model.microinstruction.CpusimSet6cb420fa" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" instructionFormat="INSTR" assemblyFormat="INSTR" instructionColors="#e5efb3" assemblyColors="#e5efb3" >
		<Microinstruction microRef="model.microinstruction.CpusimSet22b3b1ed" />
		<Microinstruction microRef="model.microinstruction.End33cb7340" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM604fb480" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->
	<ProgramCounterInfo programCounter="model.module.Register79d56585" />

</Machine>
